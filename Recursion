1.Rsum Using Recursion :

#include<iostream>
#include<conio.h>
int count = 0;
int Rsum(int a[6], int n)
{
	count = count + 1;
	if (n < 0)
	{
		count = count + 1;
		return 0;
	}
	else
	{
		count = count + 1;
		return Rsum(a, n - 1) + a[n];
	}
}

int main()
{
	int a[6] = {4,5,6,7,8,9 };
	int n = sizeof(a) / sizeof(a[0]);
	std::cout << ("n", Rsum(a, n - 1));

	std::cout << "\n" << count;
	_getch();
}



2.Towers Of Hanoi

#include<iostream>
#include<stdio.h>
#include<conio.h>
int count = 0;

int TOH(int n, char frrod, char auxrod, char torod)
{
	count = count + 1;
	if (n == 1)
	{
		count++;
		std::cout << "Move disk " << n << "from " << frrod << "to " << torod << std::endl;
		return 0;
	}
	else
	{
		count++;
		TOH(n - 1, frrod, torod, auxrod);
		count++;
		std::cout << "Move disk " << n << "from " << frrod << "to " << torod << std::endl;;
		count++;
		TOH(n - 1, auxrod, frrod, torod);
	}
}

int main()
{
	int n=3 ;
	TOH(n, 'F', 'A', 'T');
	std::cout << "\n" << count;
	_getch();
	return 0;
}


3.Permutation Generator:

#include<iostream>
using namespace std;
int c=0;
void Perm(string a,int k,int n)
{
	c++;
	char t;
	if(k==n)
	cout<<a<<endl;
	else
	{
		c++;
		for(int i=k;i<=n;i++)
		{
			c++;
			t=a[k];
			a[k]=a[i];
			a[i]=t;
			Perm(a,k+1,n);
			t=a[k];
			a[k]=a[i];
			a[i]=t;
		}
	}
}
int main()
{
	string str="pqr";
	int r=str.size();
	Perm(str,0, r-1);
	cout<<"\ncount is : "<<c<<endl;
	return 0;
}

